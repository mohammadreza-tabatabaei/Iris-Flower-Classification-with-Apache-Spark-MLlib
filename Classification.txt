# -*- coding: utf-8 -*-
"""Untitled9.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1S4T7DXqXuLB70y_kNFCJSsNsrUOkVKOO
"""

from pyspark.sql import SparkSession
from pyspark.sql.functions import *
from pyspark.ml.feature import VectorAssembler
from pyspark.ml.feature import StringIndexer
from pyspark.ml.classification import LogisticRegression
from pyspark.ml.evaluation import MulticlassClassificationEvaluator
from pyspark.ml.classification import NaiveBayes
from pyspark.ml.evaluation import MulticlassClassificationEvaluator
from pyspark.ml.classification import DecisionTreeClassifier

# Initialize Spark session
spark = SparkSession.builder.appName("irisClassification").getOrCreate()

iris_df=spark.read.csv("/content/Iris.csv",header=True,inferSchema=True)

iris_df.take(1)

VectorAssembler=VectorAssembler(inputCols=["SepalLengthCm","SepalWidthCm","PetalLengthCm","PetalWidthCm"],outputCol="features")

viris_df=VectorAssembler.transform(iris_df)

viris_df.take(1)

indexer=StringIndexer(inputCol="Species",outputCol="label")

iviris_df=indexer.fit(viris_df).transform(viris_df)

iviris_df.take(1)

splits=iviris_df.randomSplit([0.6,0.4],1)

train_df=splits[0]
test_df=splits[1]

train_df.count()

test_df.count()

iviris_df.count()

NaiveBayes=NaiveBayes(modelType="multinomial")

Nb_model=NaiveBayes.fit(train_df)

prediction_df=Nb_model.transform(test_df)

prediction_df.take(1)

evaluator=MulticlassClassificationEvaluator(labelCol="label",predictionCol="prediction",metricName="accuracy")

nbaccuracy=evaluator.evaluate(prediction_df)

nbaccuracy

from pyspark.ml.classification import MultilayerPerceptronClassifier

layers=[4,5,5,3]

mlp=MultilayerPerceptronClassifier(layers=layers,seed=1)

mlp_evaluator=MulticlassClassificationEvaluator(metricName="accuracy")

mlp_accuracy=mlp_evaluator.evaluate(prediction_df)

mlp_accuracy

dt=DecisionTreeClassifier(labelCol="label",featuresCol="features")

dt_model=dt.fit(train_df)

dt_prediction=dt_model.transform(test_df)

dt_evaluatopr=MulticlassClassificationEvaluator(labelCol="label",predictionCol="prediction",metricName="accuracy")

dt_accuracy=dt_evaluatopr.evaluate(dt_prediction)

dt_accuracy